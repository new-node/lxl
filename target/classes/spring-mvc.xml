<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
				xmlns:aop="http://www.springframework.org/schema/aop"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
				xmlns:context="http://www.springframework.org/schema/context" 
				xmlns:mvc="http://www.springframework.org/schema/mvc"
				xsi:schemaLocation="
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
				http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.2.xsd
				http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
">

	<!-- 开启controller注解支持 -->
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器-->
	<!-- 注意事项请参考：http://jinnianshilongnian.iteye.com/blog/1762632 -->
	<context:component-scan base-package="com.tky.lxl.platform.controller" use-default-filters="false">
		<context:include-filter type="regex" expression=".action.*" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<!-- 定义跳转的文件的前后缀  视图解析器InternalResourceViewResolver-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射  AnnotationMethodHandlerAdapter基于注解的适配器 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!--静态资源映射  -->
	<!--  <mvc:resources mapping="/static/**" location="/static/"/> -->
	 
	<!-- 基于注解的映射器(可选) -->
	  <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
	  
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />  
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />  
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />  
	</bean>
	
	<!-- 将无法mapping到Controller的path交给default servlet handler处理 -->
	<!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />
	
		
	<!-- 定义无Controller的path<->view直接映射 -->
	<!-- <mvc:view-controller path="/" view-name="redirect:/index.jsp" />
	<mvc:view-controller path="/login" view-name="redirect:/static/welcome.html" /> -->
	
	
	<!-- 隐式地向 Spring容器注册
	AutowiredAnnotationBeanPostProcessor、
	RequiredAnnotationBeanPostProcessor、
	CommonAnnotationBeanPostProcessor
	PersistenceAnnotationBeanPostProcessor这4个BeanPostProcessor -->
	<context:annotation-config/>
	<!-- 使用注解时一般都会配置扫描包路径 -->
	<context:component-scan base-package="com.tky.lxl.platform.aop" />
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller --> 
	<aop:aspectj-autoproxy />
	<!-- 告知Spring，我们启用注解驱动 -->
	<mvc:annotation-driven />
	
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<!-- 用户登陆拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.tky.lxl.platform.filter.LoginHandlerIntercepter"></bean>
		</mvc:interceptor>
		<!-- 验证HTTP Referer字段 拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.tky.lxl.platform.filter.RefererHandlerIntercepter"></bean>
		</mvc:interceptor>
		<!-- 使用 HTTP 动词篡改的认证旁路 拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.tky.lxl.platform.filter.MethodHandlerIntercepter"></bean>
		</mvc:interceptor>
		<!-- SQL注入拦截器 拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/login"/>
			<bean class="com.tky.lxl.platform.filter.InjectHandlerIntercepter"></bean>
		</mvc:interceptor>
		<!--  -->
		<!-- <mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.tky.lxl.platform.filter.SessionHandlerInterceptor"></bean>
		</mvc:interceptor> -->
		
	</mvc:interceptors>
	
	<!--通过前天传递的参数更改使用语言环境...?locale=zh_CN -->
	<mvc:interceptors >
		<bean class = "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
	</mvc:interceptors >

	<!--配置语言转换级别，有AcceptHeaderLocaleResolver：通过http header的accept-language域来判断；
		SessionLocaleResolver：通过本次会话过程中进行语言设定，登录周期内统一使用该设定；
		CookieLocaleResolver：cookie中保持了前一次语言设定参数，每次根据cookie来设定；
		FixedLocaleResolver：一直使用固定的locale -->
	<bean id = "localeResolver" class = "org.springframework.web.servlet.i18n.CookieLocaleResolver" >
		<!-- <property name="cookieSecure"  value="true"></property>  -->
	</bean>

	<!-- 国际化 用ResourceBundleMessageSource时，bean id 一定要使用messageSource-->
	<!--<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="i18n.language"></property>
		<property name="cacheSeconds" value="-1"/>
	</bean>-->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" >
			<list>
				<value>i18n/language</value>
			</list>
		</property>
	</bean>
	

</beans>

